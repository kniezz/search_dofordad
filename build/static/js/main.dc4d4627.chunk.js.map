{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","keyword","filteredData","DATA","onKeywordChange","e","_this","setState","target","value","search","_this2","this","filter","d","name","toLowerCase","indexOf","react_default","a","createElement","className","type","placeholder","onChange","length","concat","map","data","key","style","padding","border","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+w7xmBA2CeA,6MArCbC,MAAQ,CACNC,QAAS,GACTC,aAAcC,OAGhBC,gBAAkB,SAACC,GACjBC,EAAKC,SAAS,CAACN,QAASI,EAAEG,OAAOC,OAAQH,EAAKI,iFAGvC,IAAAC,EAAAC,KACDV,EAAeC,IAAKU,OAAO,SAAAC,GAAC,OAAwE,IAApEA,EAAEC,KAAKC,cAAcC,QAAQN,EAAKX,MAAMC,QAAQe,iBACtFJ,KAAKL,SAAS,CAAEL,aAAcA,qCAI9B,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEX,MAAOG,KAAKZ,MAAMS,MAClBa,KAAK,OACLC,YAAY,iBACZC,SAAUZ,KAAKR,kBACjBc,EAAAC,EAAAC,cAAA,WACqC,GAAlCR,KAAKZ,MAAME,aAAauB,OAAa,YAAcb,KAAKZ,MAAME,aAAauB,OAAS,IAAjC,qDAAAC,OAA2Fd,KAAKZ,MAAME,aAAauB,QACrKb,KAAKZ,MAAME,aAAayB,IAAI,SAAAC,GAAI,OAC9BV,EAAAC,EAAAC,cAAA,OAAKS,IAAKD,EAAI,MAAWE,MAAO,CAAEC,QAAS,MAAOC,OAAQ,mBACxDd,EAAAC,EAAAC,cAAA,oBAAYQ,EAAI,MAChBV,EAAAC,EAAAC,cAAA,oBAAYQ,EAAI,kBA7BdK,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dc4d4627.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { data as DATA } from './data.json';\n\nclass App extends Component {\n  \n  state = {\n    keyword: '',\n    filteredData: DATA\n  }\n\n  onKeywordChange = (e) => {\n    this.setState({keyword: e.target.value}, this.search);\n  }\n\n  search() {\n    const filteredData = DATA.filter(d => d.name.toLowerCase().indexOf(this.state.keyword.toLowerCase()) !== -1);\n    this.setState({ filteredData: filteredData });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input \n          value={this.state.value}\n          type='text' \n          placeholder='Search name...' \n          onChange={this.onKeywordChange} />\n        <div>\n          {this.state.filteredData.length == 0? 'Not found' : this.state.filteredData.length > 100? `Please search more specific name, current result: ${this.state.filteredData.length}` :\n            this.state.filteredData.map(data => \n              <div key={data['fb_id']} style={{ padding: '5px', border: '1px solid #000'}}>\n                <div>Name: {data['name']}</div>\n                <div>Goal: {data['goal']}</div>\n              </div>  \n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}